@startuml sd
autonumber

participant PisoRoute as route

participant PisoController as ctrl

participant PisoService as svc

participant PisoRepo as repo

participant EdificioRepo as erepo
participant PisoMapper as mapper

participant EdificioMapper as emapper

participant PisoSchema as schema

participant EdificioSchema as eschema
participant ConfigurationFile as conf
participant Piso as model


route -> ctrl++ : createPiso(req,res,next)
route++
ctrl -> conf : injeta o serviço do piso
conf++
conf --> ctrl
conf--
ctrl -> svc : createPiso(pisoDTO)
svc++
svc -> conf : injeta o repositório do piso
conf++
conf --> svc
conf--
svc -> conf : injeta o repositório do edificio
conf++
conf --> svc
conf--
svc -> repo : findByDesignacao(designacao)
repo++
repo -> conf : injeta o schema dos pisos
conf++
conf --> repo
conf--
repo -> schema : findOne(query)
schema++
schema --> repo
schema--
repo -> mapper : toDomain(pisoRecord)
mapper++
mapper --> repo
mapper--
repo --> svc
repo--


svc -> erepo : findByCodigo(edificio)
erepo++
erepo -> conf : injeta o schema dos edificios
conf++
conf --> erepo
conf--
erepo -> eschema : findOne(query)
eschema++
eschema --> erepo
eschema--
erepo -> emapper : toDomain(edificioRecord)
emapper++
emapper --> erepo
emapper--
erepo --> svc
erepo--

svc -> model : create()
model++
model --> svc
model--
svc -> repo: save(piso)
repo++
repo -> schema : findOne(query)
schema++


schema --> repo
schema--
alt cria piso
repo -> mapper : toPersistence(piso)
mapper++
mapper --> repo
mapper--
repo -> schema : create(rawPiso)
schema++
schema --> repo
schema--
repo -> mapper : toDomain(pisoCreated)
mapper++
mapper --> repo
mapper--
else atualiza piso
end
repo --> svc
repo--
svc -> mapper : toDTO(pisoResult)
mapper++
mapper --> svc
mapper--
svc --> ctrl
svc--

alt caso de sucesso
    ctrl --> route : Envia um código 201 (POST)
else caso de insucesso
    ctrl --> route : Envia um código 403 (NOT FOUND)
end
ctrl--
