@startuml sd


participant Route as route
participant InterfaceTipoRoboController as ictrl
participant TipoRoboController as ctrl
participant InterfaceTipoRoboService as isvc
participant TipoRoboService as svc
participant InterfaceTipoRoboRepo as irepo
participant TipoRoboRepo as repo
participant TipoRoboMapper as mapper
participant InterfaceTipoRoboPersistence as ischema
participant TipoRoboSchema as schema
participant ConfigurationFile as conf
participant Robo as model

activate route
route -> ictrl : criar tipo de robo
activate ictrl
ictrl -> ctrl : createTipoRobo(req, res, next)
activate ctrl
ctrl -> conf : injeta o serviço do tipo de robo
activate conf
conf --> ctrl
deactivate conf
ctrl -> isvc : createTipoRobo(ITipoRoboDTO)
activate isvc
isvc -> svc : createTipoRobo(ITipoRoboDTO)
activate svc
svc -> conf : injeta o repositório do tipo de robo
activate conf
conf --> svc
deactivate conf
svc -> model : tipoRobo = create(tipoRoboDTO)
activate model
model --> svc
deactivate model
svc -> irepo : tipoRobo = save(tipoRobo)
activate irepo
irepo -> repo : save(tipoRobo)
activate repo
repo -> conf : injeta o schema do tipoRobo
activate conf
conf --> repo
deactivate conf
repo -> mapper : toPersistence(tipoRobo)
activate mapper
mapper --> repo
deactivate mapper
repo -> ischema : create(tipoRobo)
activate ischema 
ischema -> schema : create(tipoRobo)
activate schema
schema --> ischema
deactivate schema
deactivate scheam
ischema --> repo
deactivate ischema
repo -> mapper : toDomain(tipoRobo)
activate mapper
mapper --> repo
deactivate mapper
repo --> irepo
deactivate repo
irepo --> svc
deactivate irepo
svc -> mapper : toDTO(tipoRobo)
activate mapper
mapper --> svc
deactivate mapper
svc --> isvc
deactivate svc
isvc --> ctrl
deactivate isvc
alt caso de sucesso
    ctrl --> ictrl : Envia um código 201 (POST)
else caso de insucesso
    ctrl --> ictrl : Envia um código 404 (NOT FOUND)
end
deactivate ctrl
ictrl --> route
deactivate ictrl
deactivate route



@enduml